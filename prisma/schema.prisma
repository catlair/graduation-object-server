datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

// generator nestgraphql {
//   provider = "node node_modules/prisma-nestjs-graphql"
//   output   = "../src/@generated/prisma-nestjs-graphql"
// }

model User {
  id        Int      @id
  email     String   @unique
  name      String   @db.VarChar(20)
  password  String   @db.VarChar(80)
  // 学院
  college   String?  @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  roles     Json     @default("[\"TEACHER\"]")

  teacherCourse TeacherCourse[]

  @@map("users")
}

// 课程
model Course {
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("courses")
}

// 老师教授的课程
model TeacherCourse {
  teacherId Int      @map("teacher_id")
  courseId  String   @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  teacher User? @relation(fields: [teacherId], references: [id])
  @@id([teacherId, courseId])
  @@map("teacher_course")
}

// 试卷
model Paper {
  id        String     @id @default(cuid())
  courseId  String     @map("course_id")
  name      String?    @unique
  // 试卷状态
  status    PaperEenum
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  lifes PaperLife[]

  @@map("papers")
}

// 试卷审核周期
model PaperLife {
  id        String     @id @default(cuid())
  paperId   String     @map("paper_id")
  // 审核人
  userId    String     @map("user_id")
  // 审核状态
  status    PaperEenum
  content   String?
  createdAt DateTime   @default(now()) @map("created_at")

  papper Paper @relation(fields: [paperId], references: [id])
  @@map("paper_lifes")
}

enum PaperEenum {
  // 待审核
  WAITING
  // 审核通过
  PASS
  // 审核不通过
  REJECT
}

// 系统发出通知
model ManagerNotice {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(40)
  content   String?
  // 触发人
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  userNotice UserNotice[]
  @@map("manager_notices")
}

// 用户接收通知
model UserNotice {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  managerNoticeId String    @map("manager_notice_id")
  // 是否已读
  read            Boolean   @default(false)
  // 读取时间
  readAt          DateTime?

  managerNotice ManagerNotice @relation(fields: [managerNoticeId], references: [id])
  @@map("user_notices")
}

// 刷新token
model RefreshToken {
  token     String   @unique @db.VarChar(32)
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@id([token, userId])
  @@map("refresh_tokens")
}
