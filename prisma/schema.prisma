datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String   @db.VarChar(20)
  password  String   @db.VarChar(40)
  // 学院
  college   String   @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  UserRole      UserRole[]
  TeacherCourse TeacherCourse[]
  @@map("users")
}

model UserRole {
  roleId String @map("role_id")
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], map: "user_role_userId_fkey")

  @@id([roleId, userId])
  @@map("user_role")
}

model Role {
  id   String    @id @default(cuid())
  name RoleEenum

  @@map("roles")
}

enum RoleEenum {
  // 管理员
  ADMIN
  // 教导处主任
  DIRECTOR
  // 教导处副主任
  VICE_DIRECTOR
  // 教师
  TEACHER
  // 教师秘书
  SECRETARY
}

// 课程
model Course {
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("courses")
}

// 老师教授的课程
model TeacherCourse {
  teacherId String   @map("teacher_id")
  courseId  String   @map("course_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User User? @relation(fields: [teacherId], references: [id])
  @@id([teacherId, courseId])
  @@map("teacher_course")
}

// 试卷
model Paper {
  id        String     @id @default(cuid())
  courseId  String     @map("course_id")
  name      String?    @unique
  // 试卷状态
  status    PaperEenum
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  lifes PaperLife[]

  @@map("papers")
}

// 试卷审核周期
model PaperLife {
  id        String     @id @default(cuid())
  paperId   String     @map("paper_id")
  // 审核人
  userId    String     @map("user_id")
  // 审核状态
  status    PaperEenum
  content   String?
  createdAt DateTime   @default(now()) @map("created_at")

  Paper Paper @relation(fields: [paperId], references: [id])
  @@map("paper_lifes")
}

enum PaperEenum {
  // 待审核
  WAITING
  // 审核通过
  PASS
  // 审核不通过
  REJECT
}

// 系统发出通知
model ManagerNotice {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(40)
  content   String?
  // 触发人
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  UserNotice UserNotice[]
  @@map("manager_notices")
}

// 用户接收通知
model UserNotice {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  managerNoticeId String    @map("manager_notice_id")
  // 是否已读
  read            Boolean   @default(false)
  // 读取时间
  readAt          DateTime?

  ManagerNotice ManagerNotice @relation(fields: [managerNoticeId], references: [id])
  @@map("user_notices")
}
