datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

model User {
  id        Int      @id
  email     String   @unique
  name      String   @db.VarChar(20)
  password  String   @db.VarChar(80)
  // 学院
  college   String   @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  roles     Json     @default("[\"TEACHER\"]")

  papers        Paper[]
  collegeEntity College @relation(fields: [college], references: [name])

  @@map("users")
}

// 试卷
model Paper {
  id        String    @id @default(cuid())
  // 课程名称
  course    String    @db.VarChar(20)
  // 学院名称
  college   String    @db.VarChar(24)
  // 发布教师
  teacherId Int       @map("teacher_id")
  // 备注
  remark    String?
  // 试卷状态
  status    PaperEnum
  // 试卷 a 名称
  aName     String    @map("a_name") @db.VarChar(50)
  // 试卷 b 名称
  bName     String    @map("b_name") @db.VarChar(50)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  lifes   PaperLife[]
  teacher User?       @relation(fields: [teacherId], references: [id])
  @@map("papers")
}

// 试卷审核周期
model PaperLife {
  id        String        @id @default(cuid())
  paperId   String        @map("paper_id")
  // 操作人
  userId    Int           @map("user_id")
  // 审核状态
  status    PaperLifeEnum
  content   String
  images    Json?         @default("[]")
  createdAt DateTime      @default(now()) @map("created_at")

  paper Paper @relation(fields: [paperId], references: [id])
  @@map("paper_lifes")
}

enum PaperEnum {
  // 待审核
  WAITING
  // 审核通过
  PASS
  // 审核不通过
  REJECT
  // 试卷已打印
  PRINT
}

enum PaperLifeEnum {
  // 创建试卷
  CREATE
  // 重新上传
  UPDATE
  // 审核通过
  PASS
  // 审核不通过
  REJECT
  // 试卷已打印
  PRINT
}

// 系统发出通知
model ManagerNotice {
  id        String   @id @default(cuid())
  title     String   @db.VarChar(40)
  content   String?
  // 触发人
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  userNotice UserNotice[]
  @@map("manager_notices")
}

// 用户接收通知
model UserNotice {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  managerNoticeId String    @map("manager_notice_id")
  // 是否已读
  read            Boolean   @default(false)
  // 读取时间
  readAt          DateTime?

  managerNotice ManagerNotice @relation(fields: [managerNoticeId], references: [id])
  @@map("user_notices")
}

// 刷新token
model RefreshToken {
  token     String   @unique @db.VarChar(32)
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  os        Json     @default("{}")
  device    Json     @default("{}")
  browser   Json     @default("{}")

  @@id([token, userId])
  @@map("refresh_tokens")
}

// 学院
model College {
  id   Int    @id
  name String @unique @db.VarChar(20)

  User User[]
  @@map("colleges")
}
